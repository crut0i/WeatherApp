[project]
name = "weather-app"
version = "1.0.0"
readme = "README.md"
description = "Weather App"
requires-python = ">=3.11.0"
authors = [{ name = "crut0i", email = "i@crut0i.com" }]
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Framework :: FastAPI",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "fastapi==0.115.12",
    "redis==6.2.0",
    "tomli==2.2.1",
    "pydantic==2.11.5",
    "pydantic-settings==2.9.1",
    "apscheduler==3.11.0",
    "colorlog==6.9.0",
    "orjson==3.10.18",
    "fastapi-decorators==1.0.15",
    "prometheus-fastapi-instrumentator==7.1.0",
    "httpx==0.28.1",
    "hvac==2.3.0",
    "rich==14.0.0",
    "sqlalchemy==2.0.41",
    "asyncpg==0.30.0",
    "hypercorn[h3]==0.17.3",
    "jinja2>=3.1.6",
]

[project.urls]
"Homepage" = "https://weatherapp.crut0i.com"
"Repository" = "https://github.com/crut0i/WeatherApp"
"Bug Tracker" = "https://github.com/crut0i/WeatherApp/issues"
"Changelog" = "https://github.com/crut0i/WeatherApp/releases"

[project.optional-dependencies]
dev = [
    "pytest==8.4.0",
    "pytest-asyncio==1.0.0",
    "pytest-cov==6.2.1",
    "pytest-sugar==1.0.0",
    "pytest-md-report==0.7.0",
    "black==25.1.0",
    "mypy==1.16.0",
    "pre-commit==4.2.0",
    "ruff==0.11.12",
]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.ruff]
line-length = 100
target-version = "py313"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    ".idea",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "__pycache__",
    "old",
    "*.egg",
    "*.egg-info",
    "*.dist-info",
    "*.whl",
    "__init__.py",
]

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = [
    "ASYNC", # asyncio
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "N",     # pep8-naming
    "B",     # flake8-bugbear
    "C90",   # mccabe complexity
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_mode = "auto"
asyncio_fixture_loop_scope = "function"
asyncio_default_fixture_loop_scope = "function"
python_classes = "Test*"
python_functions = "test_*"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
markers = ["asyncio: mark a test as an async test"]
md_report = true
md_report_verbose = 0
md_report_color = "auto"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
asyncio_mode = "auto"
omit = ["tests/*", "setup.py", "*/__init__.py"]
